/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ExternalStorageLocation } from '../model/externalStorageLocation';
import { RerunWorkflowRequest } from '../model/rerunWorkflowRequest';
import { SearchResultWorkflowSummary } from '../model/searchResultWorkflowSummary';
import { SkipTaskRequest } from '../model/skipTaskRequest';
import { StartWorkflowRequest } from '../model/startWorkflowRequest';
import { Workflow } from '../model/workflow';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class WorkflowManagementService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Removes the workflow from the system
     * 
     * @param workflowId 
     * @param archiveWorkflow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public _delete(workflowId: string, archiveWorkflow?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public _delete(workflowId: string, archiveWorkflow?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public _delete(workflowId: string, archiveWorkflow?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public _delete(workflowId: string, archiveWorkflow?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (workflowId === null || workflowId === undefined) {
            throw new Error('Required parameter workflowId was null or undefined when calling _delete.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (archiveWorkflow !== undefined) {
            queryParameters = queryParameters.set('archiveWorkflow', <any>archiveWorkflow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            '*/*'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/workflow/${encodeURIComponent(String(workflowId))}/remove`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Starts the decision task for a workflow
     * 
     * @param workflowId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public decide(workflowId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public decide(workflowId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public decide(workflowId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public decide(workflowId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (workflowId === null || workflowId === undefined) {
            throw new Error('Required parameter workflowId was null or undefined when calling decide.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            '*/*'
        ];

        return this.httpClient.put<any>(`${this.basePath}/workflow/decide/${encodeURIComponent(String(workflowId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the workflow by workflow id
     * 
     * @param workflowId 
     * @param includeTasks 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getExecutionStatus(workflowId: string, includeTasks?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Workflow>;
    public getExecutionStatus(workflowId: string, includeTasks?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Workflow>>;
    public getExecutionStatus(workflowId: string, includeTasks?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Workflow>>;
    public getExecutionStatus(workflowId: string, includeTasks?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (workflowId === null || workflowId === undefined) {
            throw new Error('Required parameter workflowId was null or undefined when calling getExecutionStatus.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (includeTasks !== undefined) {
            queryParameters = queryParameters.set('includeTasks', <any>includeTasks);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            '*/*'
        ];

        return this.httpClient.get<Workflow>(`${this.basePath}/workflow/${encodeURIComponent(String(workflowId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the uri and path of the external storage where the workflow payload is to be stored
     * 
     * @param path 
     * @param operation 
     * @param payloadType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getExternalStorageLocation(path?: string, operation?: string, payloadType?: string, observe?: 'body', reportProgress?: boolean): Observable<ExternalStorageLocation>;
    public getExternalStorageLocation(path?: string, operation?: string, payloadType?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExternalStorageLocation>>;
    public getExternalStorageLocation(path?: string, operation?: string, payloadType?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExternalStorageLocation>>;
    public getExternalStorageLocation(path?: string, operation?: string, payloadType?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (path !== undefined) {
            queryParameters = queryParameters.set('path', <any>path);
        }
        if (operation !== undefined) {
            queryParameters = queryParameters.set('operation', <any>operation);
        }
        if (payloadType !== undefined) {
            queryParameters = queryParameters.set('payloadType', <any>payloadType);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            '*/*'
        ];

        return this.httpClient.get<ExternalStorageLocation>(`${this.basePath}/workflow/externalstoragelocation`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve all the running workflows
     * 
     * @param name 
     * @param version 
     * @param startTime 
     * @param endTime 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRunningWorkflow(name: string, version?: number, startTime?: number, endTime?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public getRunningWorkflow(name: string, version?: number, startTime?: number, endTime?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public getRunningWorkflow(name: string, version?: number, startTime?: number, endTime?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public getRunningWorkflow(name: string, version?: number, startTime?: number, endTime?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getRunningWorkflow.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (version !== undefined) {
            queryParameters = queryParameters.set('version', <any>version);
        }
        if (startTime !== undefined) {
            queryParameters = queryParameters.set('startTime', <any>startTime);
        }
        if (endTime !== undefined) {
            queryParameters = queryParameters.set('endTime', <any>endTime);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            '*/*'
        ];

        return this.httpClient.get<Array<string>>(`${this.basePath}/workflow/running/${encodeURIComponent(String(name))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lists workflows for the given correlation id list
     * 
     * @param name 
     * @param includeClosed 
     * @param includeTasks 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getWorkflows(name: string, includeClosed?: boolean, includeTasks?: boolean, body?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: Array<Workflow>; }>;
    public getWorkflows(name: string, includeClosed?: boolean, includeTasks?: boolean, body?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: Array<Workflow>; }>>;
    public getWorkflows(name: string, includeClosed?: boolean, includeTasks?: boolean, body?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: Array<Workflow>; }>>;
    public getWorkflows(name: string, includeClosed?: boolean, includeTasks?: boolean, body?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getWorkflows.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (includeClosed !== undefined) {
            queryParameters = queryParameters.set('includeClosed', <any>includeClosed);
        }
        if (includeTasks !== undefined) {
            queryParameters = queryParameters.set('includeTasks', <any>includeTasks);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<{ [key: string]: Array<Workflow>; }>(`${this.basePath}/workflow/${encodeURIComponent(String(name))}/correlated`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lists workflows for the given correlation id
     * 
     * @param name 
     * @param correlationId 
     * @param includeClosed 
     * @param includeTasks 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getWorkflows_1(name: string, correlationId: string, includeClosed?: boolean, includeTasks?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<Workflow>>;
    public getWorkflows_1(name: string, correlationId: string, includeClosed?: boolean, includeTasks?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Workflow>>>;
    public getWorkflows_1(name: string, correlationId: string, includeClosed?: boolean, includeTasks?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Workflow>>>;
    public getWorkflows_1(name: string, correlationId: string, includeClosed?: boolean, includeTasks?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getWorkflows_1.');
        }
        if (correlationId === null || correlationId === undefined) {
            throw new Error('Required parameter correlationId was null or undefined when calling getWorkflows_1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (includeClosed !== undefined) {
            queryParameters = queryParameters.set('includeClosed', <any>includeClosed);
        }
        if (includeTasks !== undefined) {
            queryParameters = queryParameters.set('includeTasks', <any>includeTasks);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            '*/*'
        ];

        return this.httpClient.get<Array<Workflow>>(`${this.basePath}/workflow/${encodeURIComponent(String(name))}/correlated/${encodeURIComponent(String(correlationId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Pauses the workflow
     * 
     * @param workflowId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pauseWorkflow(workflowId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public pauseWorkflow(workflowId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public pauseWorkflow(workflowId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public pauseWorkflow(workflowId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (workflowId === null || workflowId === undefined) {
            throw new Error('Required parameter workflowId was null or undefined when calling pauseWorkflow.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            '*/*'
        ];

        return this.httpClient.put<any>(`${this.basePath}/workflow/${encodeURIComponent(String(workflowId))}/pause`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Reruns the workflow from a specific task
     * 
     * @param workflowId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rerun(workflowId: string, body?: RerunWorkflowRequest, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public rerun(workflowId: string, body?: RerunWorkflowRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public rerun(workflowId: string, body?: RerunWorkflowRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public rerun(workflowId: string, body?: RerunWorkflowRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (workflowId === null || workflowId === undefined) {
            throw new Error('Required parameter workflowId was null or undefined when calling rerun.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<string>(`${this.basePath}/workflow/${encodeURIComponent(String(workflowId))}/rerun`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Resets callback times of all non-terminal SIMPLE tasks to 0
     * 
     * @param workflowId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resetWorkflow(workflowId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public resetWorkflow(workflowId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public resetWorkflow(workflowId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public resetWorkflow(workflowId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (workflowId === null || workflowId === undefined) {
            throw new Error('Required parameter workflowId was null or undefined when calling resetWorkflow.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            '*/*'
        ];

        return this.httpClient.post<any>(`${this.basePath}/workflow/${encodeURIComponent(String(workflowId))}/resetcallbacks`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restarts a completed workflow
     * 
     * @param workflowId 
     * @param useLatestDefinitions 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public restart(workflowId: string, useLatestDefinitions?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public restart(workflowId: string, useLatestDefinitions?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public restart(workflowId: string, useLatestDefinitions?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public restart(workflowId: string, useLatestDefinitions?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (workflowId === null || workflowId === undefined) {
            throw new Error('Required parameter workflowId was null or undefined when calling restart.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (useLatestDefinitions !== undefined) {
            queryParameters = queryParameters.set('useLatestDefinitions', <any>useLatestDefinitions);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            '*/*'
        ];

        return this.httpClient.post<any>(`${this.basePath}/workflow/${encodeURIComponent(String(workflowId))}/restart`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Resumes the workflow
     * 
     * @param workflowId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resumeWorkflow(workflowId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public resumeWorkflow(workflowId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public resumeWorkflow(workflowId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public resumeWorkflow(workflowId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (workflowId === null || workflowId === undefined) {
            throw new Error('Required parameter workflowId was null or undefined when calling resumeWorkflow.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            '*/*'
        ];

        return this.httpClient.put<any>(`${this.basePath}/workflow/${encodeURIComponent(String(workflowId))}/resume`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retries the last failed task
     * 
     * @param workflowId 
     * @param resumeSubworkflowTasks 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retry(workflowId: string, resumeSubworkflowTasks?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public retry(workflowId: string, resumeSubworkflowTasks?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public retry(workflowId: string, resumeSubworkflowTasks?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public retry(workflowId: string, resumeSubworkflowTasks?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (workflowId === null || workflowId === undefined) {
            throw new Error('Required parameter workflowId was null or undefined when calling retry.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (resumeSubworkflowTasks !== undefined) {
            queryParameters = queryParameters.set('resumeSubworkflowTasks', <any>resumeSubworkflowTasks);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            '*/*'
        ];

        return this.httpClient.post<any>(`${this.basePath}/workflow/${encodeURIComponent(String(workflowId))}/retry`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search for workflows based on payload and other parameters
     * use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC.
     * @param start 
     * @param size 
     * @param sort 
     * @param freeText 
     * @param query 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public search(start?: number, size?: number, sort?: string, freeText?: string, query?: string, observe?: 'body', reportProgress?: boolean): Observable<SearchResultWorkflowSummary>;
    public search(start?: number, size?: number, sort?: string, freeText?: string, query?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SearchResultWorkflowSummary>>;
    public search(start?: number, size?: number, sort?: string, freeText?: string, query?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SearchResultWorkflowSummary>>;
    public search(start?: number, size?: number, sort?: string, freeText?: string, query?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (start !== undefined) {
            queryParameters = queryParameters.set('start', <any>start);
        }
        if (size !== undefined) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (sort !== undefined) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (freeText !== undefined) {
            queryParameters = queryParameters.set('freeText', <any>freeText);
        }
        if (query !== undefined) {
            queryParameters = queryParameters.set('query', <any>query);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            '*/*'
        ];

        return this.httpClient.get<SearchResultWorkflowSummary>(`${this.basePath}/workflow/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search for workflows based on task parameters
     * use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
     * @param start 
     * @param size 
     * @param sort 
     * @param freeText 
     * @param query 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchWorkflowsByTasks(start?: number, size?: number, sort?: string, freeText?: string, query?: string, observe?: 'body', reportProgress?: boolean): Observable<SearchResultWorkflowSummary>;
    public searchWorkflowsByTasks(start?: number, size?: number, sort?: string, freeText?: string, query?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SearchResultWorkflowSummary>>;
    public searchWorkflowsByTasks(start?: number, size?: number, sort?: string, freeText?: string, query?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SearchResultWorkflowSummary>>;
    public searchWorkflowsByTasks(start?: number, size?: number, sort?: string, freeText?: string, query?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (start !== undefined) {
            queryParameters = queryParameters.set('start', <any>start);
        }
        if (size !== undefined) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (sort !== undefined) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (freeText !== undefined) {
            queryParameters = queryParameters.set('freeText', <any>freeText);
        }
        if (query !== undefined) {
            queryParameters = queryParameters.set('query', <any>query);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            '*/*'
        ];

        return this.httpClient.get<SearchResultWorkflowSummary>(`${this.basePath}/workflow/search-by-tasks`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Skips a given task from a current running workflow
     * 
     * @param workflowId 
     * @param taskReferenceName 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public skipTaskFromWorkflow(workflowId: string, taskReferenceName: string, body?: SkipTaskRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public skipTaskFromWorkflow(workflowId: string, taskReferenceName: string, body?: SkipTaskRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public skipTaskFromWorkflow(workflowId: string, taskReferenceName: string, body?: SkipTaskRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public skipTaskFromWorkflow(workflowId: string, taskReferenceName: string, body?: SkipTaskRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (workflowId === null || workflowId === undefined) {
            throw new Error('Required parameter workflowId was null or undefined when calling skipTaskFromWorkflow.');
        }
        if (taskReferenceName === null || taskReferenceName === undefined) {
            throw new Error('Required parameter taskReferenceName was null or undefined when calling skipTaskFromWorkflow.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/workflow/${encodeURIComponent(String(workflowId))}/skiptask/${encodeURIComponent(String(taskReferenceName))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Start a new workflow with StartWorkflowRequest, which allows task to be executed in a domain
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public startWorkflow(body?: StartWorkflowRequest, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public startWorkflow(body?: StartWorkflowRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public startWorkflow(body?: StartWorkflowRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public startWorkflow(body?: StartWorkflowRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<string>(`${this.basePath}/workflow`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Start a new workflow. Returns the ID of the workflow instance that can be later used for tracking
     * 
     * @param name 
     * @param version 
     * @param correlationId 
     * @param priority 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public startWorkflow_2(name: string, version?: number, correlationId?: string, priority?: number, body?: any, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public startWorkflow_2(name: string, version?: number, correlationId?: string, priority?: number, body?: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public startWorkflow_2(name: string, version?: number, correlationId?: string, priority?: number, body?: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public startWorkflow_2(name: string, version?: number, correlationId?: string, priority?: number, body?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling startWorkflow_2.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (version !== undefined) {
            queryParameters = queryParameters.set('version', <any>version);
        }
        if (correlationId !== undefined) {
            queryParameters = queryParameters.set('correlationId', <any>correlationId);
        }
        if (priority !== undefined) {
            queryParameters = queryParameters.set('priority', <any>priority);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<string>(`${this.basePath}/workflow/${encodeURIComponent(String(name))}`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Terminate workflow execution
     * 
     * @param workflowId 
     * @param reason 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public terminate(workflowId: string, reason?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public terminate(workflowId: string, reason?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public terminate(workflowId: string, reason?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public terminate(workflowId: string, reason?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (workflowId === null || workflowId === undefined) {
            throw new Error('Required parameter workflowId was null or undefined when calling terminate.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reason !== undefined) {
            queryParameters = queryParameters.set('reason', <any>reason);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            '*/*'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/workflow/${encodeURIComponent(String(workflowId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
