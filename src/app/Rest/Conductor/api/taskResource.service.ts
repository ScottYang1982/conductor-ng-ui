/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ExternalStorageLocation } from '../model/externalStorageLocation';
import { PollData } from '../model/pollData';
import { SearchResultTaskSummary } from '../model/searchResultTaskSummary';
import { Task } from '../model/task';
import { TaskExecLog } from '../model/taskExecLog';
import { TaskResult } from '../model/taskResult';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TaskResourceService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get the details about each queue
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public all(observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: number; }>;
    public all(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: number; }>>;
    public all(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: number; }>>;
    public all(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<{ [key: string]: number; }>('get',`${this.basePath}/api/tasks/queue/all`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the details about each queue
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public allVerbose(observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: { [key: string]: { [key: string]: number; }; }; }>;
    public allVerbose(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: { [key: string]: { [key: string]: number; }; }; }>>;
    public allVerbose(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: { [key: string]: { [key: string]: number; }; }; }>>;
    public allVerbose(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<{ [key: string]: { [key: string]: { [key: string]: number; }; }; }>('get',`${this.basePath}/api/tasks/queue/all/verbose`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Batch poll for a task of a certain type
     * 
     * @param tasktype 
     * @param workerid 
     * @param domain 
     * @param count 
     * @param timeout 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public batchPoll(tasktype: string, workerid?: string, domain?: string, count?: number, timeout?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Task>>;
    public batchPoll(tasktype: string, workerid?: string, domain?: string, count?: number, timeout?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Task>>>;
    public batchPoll(tasktype: string, workerid?: string, domain?: string, count?: number, timeout?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Task>>>;
    public batchPoll(tasktype: string, workerid?: string, domain?: string, count?: number, timeout?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (tasktype === null || tasktype === undefined) {
            throw new Error('Required parameter tasktype was null or undefined when calling batchPoll.');
        }





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (workerid !== undefined && workerid !== null) {
            queryParameters = queryParameters.set('workerid', <any>workerid);
        }
        if (domain !== undefined && domain !== null) {
            queryParameters = queryParameters.set('domain', <any>domain);
        }
        if (count !== undefined && count !== null) {
            queryParameters = queryParameters.set('count', <any>count);
        }
        if (timeout !== undefined && timeout !== null) {
            queryParameters = queryParameters.set('timeout', <any>timeout);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Task>>('get',`${this.basePath}/api/tasks/poll/batch/${encodeURIComponent(String(tasktype))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the last poll data for all task types
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllPollData(observe?: 'body', reportProgress?: boolean): Observable<Array<PollData>>;
    public getAllPollData(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PollData>>>;
    public getAllPollData(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PollData>>>;
    public getAllPollData(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<PollData>>('get',`${this.basePath}/api/tasks/queue/polldata/all`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the external uri where the task payload is to be stored
     * 
     * @param path 
     * @param operation 
     * @param payloadType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getExternalStorageLocation(path: string, operation: string, payloadType: string, observe?: 'body', reportProgress?: boolean): Observable<ExternalStorageLocation>;
    public getExternalStorageLocation(path: string, operation: string, payloadType: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExternalStorageLocation>>;
    public getExternalStorageLocation(path: string, operation: string, payloadType: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExternalStorageLocation>>;
    public getExternalStorageLocation(path: string, operation: string, payloadType: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling getExternalStorageLocation.');
        }

        if (operation === null || operation === undefined) {
            throw new Error('Required parameter operation was null or undefined when calling getExternalStorageLocation.');
        }

        if (payloadType === null || payloadType === undefined) {
            throw new Error('Required parameter payloadType was null or undefined when calling getExternalStorageLocation.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (path !== undefined && path !== null) {
            queryParameters = queryParameters.set('path', <any>path);
        }
        if (operation !== undefined && operation !== null) {
            queryParameters = queryParameters.set('operation', <any>operation);
        }
        if (payloadType !== undefined && payloadType !== null) {
            queryParameters = queryParameters.set('payloadType', <any>payloadType);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ExternalStorageLocation>('get',`${this.basePath}/api/tasks/externalstoragelocation`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the last poll data for a given task type
     * 
     * @param taskType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPollData(taskType: string, observe?: 'body', reportProgress?: boolean): Observable<Array<PollData>>;
    public getPollData(taskType: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PollData>>>;
    public getPollData(taskType: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PollData>>>;
    public getPollData(taskType: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (taskType === null || taskType === undefined) {
            throw new Error('Required parameter taskType was null or undefined when calling getPollData.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (taskType !== undefined && taskType !== null) {
            queryParameters = queryParameters.set('taskType', <any>taskType);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<PollData>>('get',`${this.basePath}/api/tasks/queue/polldata`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get task by Id
     * 
     * @param taskId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTask(taskId: string, observe?: 'body', reportProgress?: boolean): Observable<Task>;
    public getTask(taskId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Task>>;
    public getTask(taskId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Task>>;
    public getTask(taskId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling getTask.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Task>('get',`${this.basePath}/api/tasks/${encodeURIComponent(String(taskId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Task Execution Logs
     * 
     * @param taskId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTaskLogs(taskId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TaskExecLog>>;
    public getTaskLogs(taskId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TaskExecLog>>>;
    public getTaskLogs(taskId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TaskExecLog>>>;
    public getTaskLogs(taskId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling getTaskLogs.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TaskExecLog>>('get',`${this.basePath}/api/tasks/${encodeURIComponent(String(taskId))}/log`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Log Task Execution Details
     * 
     * @param body 
     * @param taskId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public log(body: string, taskId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public log(body: string, taskId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public log(body: string, taskId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public log(body: string, taskId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling log.');
        }

        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling log.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/api/tasks/${encodeURIComponent(String(taskId))}/log`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Poll for a task of a certain type
     * 
     * @param tasktype 
     * @param workerid 
     * @param domain 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public poll(tasktype: string, workerid?: string, domain?: string, observe?: 'body', reportProgress?: boolean): Observable<Task>;
    public poll(tasktype: string, workerid?: string, domain?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Task>>;
    public poll(tasktype: string, workerid?: string, domain?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Task>>;
    public poll(tasktype: string, workerid?: string, domain?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (tasktype === null || tasktype === undefined) {
            throw new Error('Required parameter tasktype was null or undefined when calling poll.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (workerid !== undefined && workerid !== null) {
            queryParameters = queryParameters.set('workerid', <any>workerid);
        }
        if (domain !== undefined && domain !== null) {
            queryParameters = queryParameters.set('domain', <any>domain);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Task>('get',`${this.basePath}/api/tasks/poll/${encodeURIComponent(String(tasktype))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Requeue pending tasks
     * 
     * @param taskType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public requeuePendingTask(taskType: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public requeuePendingTask(taskType: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public requeuePendingTask(taskType: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public requeuePendingTask(taskType: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (taskType === null || taskType === undefined) {
            throw new Error('Required parameter taskType was null or undefined when calling requeuePendingTask.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('post',`${this.basePath}/api/tasks/queue/requeue/${encodeURIComponent(String(taskType))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search for tasks based in payload and other parameters
     * use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
     * @param start 
     * @param size 
     * @param sort 
     * @param freeText 
     * @param query 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public search(start?: number, size?: number, sort?: string, freeText?: string, query?: string, observe?: 'body', reportProgress?: boolean): Observable<SearchResultTaskSummary>;
    public search(start?: number, size?: number, sort?: string, freeText?: string, query?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SearchResultTaskSummary>>;
    public search(start?: number, size?: number, sort?: string, freeText?: string, query?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SearchResultTaskSummary>>;
    public search(start?: number, size?: number, sort?: string, freeText?: string, query?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (start !== undefined && start !== null) {
            queryParameters = queryParameters.set('start', <any>start);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (freeText !== undefined && freeText !== null) {
            queryParameters = queryParameters.set('freeText', <any>freeText);
        }
        if (query !== undefined && query !== null) {
            queryParameters = queryParameters.set('query', <any>query);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<SearchResultTaskSummary>('get',`${this.basePath}/api/tasks/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Task type queue sizes
     * 
     * @param taskType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public size(taskType?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: number; }>;
    public size(taskType?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: number; }>>;
    public size(taskType?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: number; }>>;
    public size(taskType?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (taskType) {
            taskType.forEach((element) => {
                queryParameters = queryParameters.append('taskType', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<{ [key: string]: number; }>('get',`${this.basePath}/api/tasks/queue/sizes`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a task
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTask(body: TaskResult, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public updateTask(body: TaskResult, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public updateTask(body: TaskResult, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public updateTask(body: TaskResult, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateTask.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<string>('post',`${this.basePath}/api/tasks`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
